#!/bin/bash
set -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
source ${DIR}/../../scripts/utils.sh

create_or_get_oracle_image "LINUX.X64_193000_db_home.zip" "../../connect/connect-cdc-oracle19-source/ora-setup-scripts-cdb-table"

${DIR}/../../environment/plaintext/start.sh "${PWD}/docker-compose.plaintext.cdb-table.repro-94635-multiple-events-in-same-topic.yml"


# Verify Oracle DB has started within MAX_WAIT seconds
MAX_WAIT=2500
CUR_WAIT=0
log "âŒ› Waiting up to $MAX_WAIT seconds for Oracle DB to start"
docker container logs oracle > /tmp/out.txt 2>&1
while [[ ! $(cat /tmp/out.txt) =~ "DONE: Executing user defined scripts" ]]; do
sleep 10
docker container logs oracle > /tmp/out.txt 2>&1
CUR_WAIT=$(( CUR_WAIT+10 ))
if [[ "$CUR_WAIT" -gt "$MAX_WAIT" ]]; then
     logerror "ERROR: The logs in oracle container do not show 'DONE: Executing user defined scripts' after $MAX_WAIT seconds. Please troubleshoot with 'docker container ps' and 'docker container logs'.\n"
     exit 1
fi
done
log "Oracle DB has started!"
sleep 10

# Create a redo-log-topic. Please make sure you create a topic with the same name you will use for "redo.log.topic.name": "redo-log-topic"
# CC-13104
docker exec connect kafka-topics --create --topic redo-log-topic --bootstrap-server broker:9092 --replication-factor 1 --partitions 1 --config cleanup.policy=delete --config retention.ms=120960000
log "redo-log-topic is created"
sleep 5

log "Create OTHERTABLE"
docker exec -i oracle bash -c "sqlplus C\#\#MYUSER/mypassword@//localhost:1521/ORCLCDB" << EOF

  create table OTHERTABLE (
          id NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 42) NOT NULL PRIMARY KEY,
          first_name VARCHAR(50),
          create_ts timestamp DEFAULT CURRENT_TIMESTAMP,
          update_ts timestamp
  );

  CREATE OR REPLACE TRIGGER TRG_OTHERTABLE_UPD
  BEFORE INSERT OR UPDATE ON OTHERTABLE
  REFERENCING NEW AS NEW_ROW
    FOR EACH ROW
  BEGIN
    SELECT SYSDATE
          INTO :NEW_ROW.UPDATE_TS
          FROM DUAL;
  END;
  /
  exit;
EOF

log "insert a record in OTHERTABLE"
docker exec -i oracle bash -c "sqlplus C\#\#MYUSER/mypassword@//localhost:1521/ORCLCDB" << EOF
insert into OTHERTABLE (id, first_name) values (1, 'Vincent');

  exit;
EOF

log "Creating Oracle source connector"
curl -X PUT \
     -H "Content-Type: application/json" \
     --data '{
               "connector.class": "io.confluent.connect.oracle.cdc.OracleCdcSourceConnector",
               "tasks.max":2,
               "key.converter": "io.confluent.connect.avro.AvroConverter",
               "key.converter.schema.registry.url": "http://schema-registry:8081",
               "key.converter.key.subject.name.strategy": "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy",

               "value.converter": "io.confluent.connect.avro.AvroConverter",
               "value.converter.schema.registry.url": "http://schema-registry:8081",
               "value.converter.value.subject.name.strategy": "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy",

               "confluent.license": "",
               "confluent.topic.bootstrap.servers": "broker:9092",
               "confluent.topic.replication.factor": "1",
               "oracle.server": "oracle",
               "oracle.port": 1521,
               "oracle.sid": "ORCLCDB",
               "oracle.username": "C##MYUSER",
               "oracle.password": "mypassword",
               "start.from":"snapshot",
               "redo.log.topic.name": "redo-log-topic",
               "redo.log.consumer.bootstrap.servers":"broker:9092",
               "table.inclusion.regex": ".*CUSTOMERS.*|.*OTHERTABLE.*|",
               "table.topic.name.template": "${databaseName}.${schemaName}.${tableName}",
               "numeric.mapping": "best_fit",
               "connection.pool.max.size": 20,
               "redo.log.row.fetch.size":1,
               "oracle.dictionary.mode": "auto",

               "predicates": "isCUSTOMERS,isOTHERTABLE",
               "predicates.isCUSTOMERS.pattern": ".*CUSTOMERS.*",
               "predicates.isCUSTOMERS.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",
               "predicates.isOTHERTABLE.pattern": ".*OTHERTABLE.*",
               "predicates.isOTHERTABLE.type": "org.apache.kafka.connect.transforms.predicates.TopicNameMatches",

               "transforms": "SetSchemaCustomersKey,SetSchemaOtherKey,SetSchemaOtherValue,SetSchemaCustomersValue,RegexRouter",

               "transforms.SetSchemaCustomersKey.type": "org.apache.kafka.connect.transforms.SetSchemaMetadata$Key",
               "transforms.SetSchemaCustomersKey.schema.name": "myCustomerSchema",
               "transforms.SetSchemaCustomersKey.schema.version": "1",
               "transforms.SetSchemaCustomersKey.predicate": "isCUSTOMERS",

               "transforms.SetSchemaOtherKey.type": "org.apache.kafka.connect.transforms.SetSchemaMetadata$Key",
               "transforms.SetSchemaOtherKey.schema.name": "myOtherSchema",
               "transforms.SetSchemaOtherKey.schema.version": "1",
               "transforms.SetSchemaOtherKey.predicate": "isOTHERTABLE",

               "transforms.SetSchemaCustomersValue.type": "org.apache.kafka.connect.transforms.SetSchemaMetadata$Value",
               "transforms.SetSchemaCustomersValue.schema.name": "myCustomerSchema",
               "transforms.SetSchemaCustomersValue.schema.version": "1",
               "transforms.SetSchemaCustomersValue.predicate": "isCUSTOMERS",

               "transforms.SetSchemaOtherValue.type": "org.apache.kafka.connect.transforms.SetSchemaMetadata$Value",
               "transforms.SetSchemaOtherValue.schema.name": "myOtherSchema",
               "transforms.SetSchemaOtherValue.schema.version": "1",
               "transforms.SetSchemaOtherValue.predicate": "isOTHERTABLE",

               "transforms.RegexRouter.type": "org.apache.kafka.connect.transforms.RegexRouter",
               "transforms.RegexRouter.regex": ".*",
               "transforms.RegexRouter.replacement": "MyUnifiedTopic"
          }' \
     http://localhost:8083/connectors/cdc-oracle-source-cdb/config | jq .

log "Waiting 20s for connector to read existing data"
sleep 20

log "Running SQL scripts"
for script in ../../connect/connect-cdc-oracle19-source/sample-sql-scripts/*.sh
do
     $script "ORCLCDB"
done

log "insert another record in OTHERTABLE"
docker exec -i oracle bash -c "sqlplus C\#\#MYUSER/mypassword@//localhost:1521/ORCLCDB" << EOF
insert into OTHERTABLE (id, first_name) values (2, 'Vincent 2');

  exit;
EOF

log "Waiting 20s for connector to read new data"
sleep 20

log "Verifying topic MyUnifiedTopic"
set +e
timeout 60 docker exec connect kafka-avro-console-consumer -bootstrap-server broker:9092 --property schema.registry.url=http://schema-registry:8081 --topic MyUnifiedTopic --from-beginning --max-messages 15 > /tmp/result.log  2>&1
set -e
cat /tmp/result.log

log "Verifying topic redo-log-topic: there should be 9 records"
timeout 60 docker exec connect kafka-avro-console-consumer -bootstrap-server broker:9092 --property schema.registry.url=http://schema-registry:8081 --topic redo-log-topic --from-beginning --max-messages 10


log "Schemas"
curl --request GET \
  --url http://localhost:8081/subjects 


# NOT WORKING

# [2022-03-18 16:27:30,383] ERROR [cdc-oracle-source-cdb|task-1] WorkerSourceTask{id=cdc-oracle-source-cdb-1} Task threw an uncaught and unrecoverable exception. Task is being killed and will not recover until manually restarted (org.apache.kafka.connect.runtime.WorkerTask:206)
# org.apache.kafka.connect.errors.ConnectException: Tolerance exceeded in error handler
#         at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError(RetryWithToleranceOperator.java:220)
#         at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execute(RetryWithToleranceOperator.java:142)
#         at org.apache.kafka.connect.runtime.TransformationChain.transformRecord(TransformationChain.java:70)
#         at org.apache.kafka.connect.runtime.TransformationChain.apply(TransformationChain.java:50)
#         at org.apache.kafka.connect.runtime.WorkerSourceTask.sendRecords(WorkerSourceTask.java:358)
#         at org.apache.kafka.connect.runtime.WorkerSourceTask.execute(WorkerSourceTask.java:272)
#         at org.apache.kafka.connect.runtime.WorkerTask.doRun(WorkerTask.java:199)
#         at org.apache.kafka.connect.runtime.WorkerTask.run(WorkerTask.java:254)
#         at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
#         at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
#         at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
#         at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
#         at java.base/java.lang.Thread.run(Thread.java:829)
# Caused by: org.apache.kafka.connect.errors.DataException: Cannot list fields on non-struct type
#         at org.apache.kafka.connect.data.ConnectSchema.fields(ConnectSchema.java:179)
#         at org.apache.kafka.connect.transforms.SetSchemaMetadata.apply(SetSchemaMetadata.java:78)
#         at org.apache.kafka.connect.runtime.PredicatedTransformation.apply(PredicatedTransformation.java:56)
#         at org.apache.kafka.connect.runtime.TransformationChain.lambda$transformRecord$0(TransformationChain.java:70)
#         at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndRetry(RetryWithToleranceOperator.java:166)
#         at org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator.execAndHandleError(RetryWithToleranceOperator.java:200)
#         ... 12 more