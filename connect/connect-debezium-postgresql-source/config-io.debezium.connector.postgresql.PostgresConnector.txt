==========================
Transforms: addTopicSuffix
==========================
ðŸ”˜ transforms.addTopicSuffix.type

Class for the 'addTopicSuffix' transformation.

	 - Type: CLASS
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ transforms.addTopicSuffix.plugin.version

Version of the 'addTopicSuffix' transformation.

	 - Type: STRING
	 - Default: 8.1.0-ce
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ transforms.addTopicSuffix.regex

Regular expression to use for matching.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ transforms.addTopicSuffix.replacement

Replacement string.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ transforms.addTopicSuffix.negate

Whether the configured predicate should be negated.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ transforms.addTopicSuffix.predicate

The alias of a predicate used to determine whether to apply this transformation.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

==========================
Postgres
==========================
ðŸ”˜ topic.prefix

Topic prefix that identifies and provides a namespace for the particular database server/cluster is capturing changes. The topic prefix should be unique across all other connectors, since it is used as a prefix for all Kafka topic names that receive events emitted by this connector. Only alphanumeric characters, hyphens, dots and underscores must be accepted.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.hostname

Resolvable hostname or IP address of the database server.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.port

Port of the database server.

	 - Type: INT
	 - Default: 5432
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.user

Name of the database user to be used when connecting to the database.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.password

Password of the database user to be used when connecting to the database.

	 - Type: PASSWORD
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.dbname

The name of the database from which the connector should capture changes

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ database.query.timeout.ms

Time to wait for a query to execute, given in milliseconds. Defaults to 600 seconds (600,000 ms); zero means there is no limit.

	 - Type: INT
	 - Default: 600000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ plugin.name

The name of the Postgres logical decoding plugin installed on the server. Supported values are 'decoderbufs' and 'pgoutput'. Defaults to 'decoderbufs'.

	 - Type: STRING
	 - Default: decoderbufs
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ slot.name

The name of the Postgres logical decoding slot created for streaming changes from a plugin. Defaults to 'debezium

	 - Type: STRING
	 - Default: debezium
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ publication.name

The name of the Postgres 10+ publication used for streaming changes from a plugin. Defaults to 'dbz_publication'

	 - Type: STRING
	 - Default: dbz_publication
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ publication.autocreate.mode

Applies only when streaming changes using pgoutput.Determine how creation of a publication should work, the default is all_tables.DISABLED - The connector will not attempt to create a publication at all. The expectation is that the user has created the publication up-front. If the publication isn't found to exist upon startup, the connector will throw an exception and stop.ALL_TABLES - If no publication exists, the connector will create a new publication for all tables. Note this requires that the configured user has access. If the publication already exists, it will be used. i.e CREATE PUBLICATION <publication_name> FOR ALL TABLES;FILTERED - If no publication exists, the connector will create a new publication for all those tables matchingthe current filter configuration (see table/database include/exclude list properties). If the publication already exists, it will be used. i.e CREATE PUBLICATION <publication_name> FOR TABLE <tbl1, tbl2, etc>

	 - Type: STRING
	 - Default: all_tables
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ replica.identity.autoset.values

Applies only when streaming changes using pgoutput.Determines the value for Replica Identity at table level. This option will overwrite the existing value in databaseA comma-separated list of regular expressions that match fully-qualified tables and Replica Identity value to be used in the table. Each expression must match the pattern '<fully-qualified table name>:<replica identity>', where the table names could be defined as (SCHEMA_NAME.TABLE_NAME), and the replica identity values are: DEFAULT - Records the old values of the columns of the primary key, if any. This is the default for non-system tables.INDEX index_name - Records the old values of the columns covered by the named index, that must be unique, not partial, not deferrable, and include only columns marked NOT NULL. If this index is dropped, the behavior is the same as NOTHING.FULL - Records the old values of all columns in the row.NOTHING - Records no information about the old row. This is the default for system tables.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ slot.drop.on.stop

Whether or not to drop the logical replication slot when the connector finishes orderly. By default the replication is kept so that on restart progress can resume from the last recorded location

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ slot.failover

Whether or not to create a failover slot. This is only supported when connecting to a primary server of a Postgres cluster, version 17 or newer. When not specified, or when not connecting to a Postgres 17+ primary, no failover slot will be created.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ slot.stream.params

Any optional parameters used by logical decoding plugin. Semi-colon separated. E.g. 'add-tables=public.table,public.table2;include-lsn=true'

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ database.initial.statements

A semicolon separated list of SQL statements to be executed when a JDBC connection to the database is established. Note that the connector may establish JDBC connections at its own discretion, so this should typically be used for configuration of session parameters only, but not for executing DML statements. Use doubled semicolon (';;') to use a semicolon as a character and not as a delimiter.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ database.sslmode

Whether to use an encrypted connection to Postgres. Options include: 'disable' (the default) to use an unencrypted connection; 'allow' to try and use an unencrypted connection first and, failing that, a secure (encrypted) connection; 'prefer' (the default) to try and use a secure (encrypted) connection first and, failing that, an unencrypted connection; 'require' to use a secure (encrypted) connection, and fail if one cannot be established; 'verify-ca' like 'required' but additionally verify the server TLS certificate against the configured Certificate Authority (CA) certificates, or fail if no valid matching CA certificates are found; or 'verify-full' like 'verify-ca' but additionally verify that the server certificate matches the host to which the connection is attempted.

	 - Type: STRING
	 - Default: prefer
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ database.sslcert

File containing the SSL Certificate for the client. See the Postgres SSL docs for further information

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ database.sslpassword

Password to access the client private key from the file specified by 'database.sslkey'. See the Postgres SSL docs for further information

	 - Type: PASSWORD
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ database.sslrootcert

File containing the root certificate(s) against which the server is validated. See the Postgres JDBC SSL docs for further information

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ database.sslkey

File containing the SSL private key for the client. See the Postgres SSL docs for further information

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ slot.max.retries

How many times to retry connecting to a replication slot when an attempt fails.

	 - Type: INT
	 - Default: 6
	 - Importance: LOW
	 - Required: false

ðŸ”˜ slot.retry.delay.ms

Time to wait between retry attempts when the connector fails to connect to a replication slot, given in milliseconds. Defaults to 10 seconds (10,000 ms).

	 - Type: LONG
	 - Default: 10000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ database.sslfactory

A name of class to that creates SSL Sockets. Use org.postgresql.ssl.NonValidatingFactory to disable SSL validation in development environments

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ status.update.interval.ms

Frequency for sending replication connection status updates to the server, given in milliseconds. Defaults to 10 seconds (10,000 ms).

	 - Type: INT
	 - Default: 10000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ database.tcpKeepAlive

Enable or disable TCP keep-alive probe to avoid dropping TCP connection

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ xmin.fetch.interval.ms

Specify how often (in ms) the xmin will be fetched from the replication slot. This xmin value is exposed by the slot which gives a lower bound of where a new replication slot could start from. The lower the value, the more likely this value is to be the current 'true' value, but the bigger the performance cost. The bigger the value, the less likely this value is to be the current 'true' value, but the lower the performance penalty. The default is set to 0 ms, which disables tracking xmin.

	 - Type: LONG
	 - Default: 0
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ skipped.operations

The comma-separated list of operations to skip during streaming, defined as: 'c' for inserts/create; 'u' for updates; 'd' for deletes, 't' for truncates, and 'none' to indicate nothing skipped. By default, only truncate operations will be skipped.

	 - Type: LIST
	 - Default: t
	 - Importance: LOW
	 - Required: false

ðŸ”˜ flush.lsn.source

Boolean to determine if Debezium should flush LSN in the source postgres database. If set to false, user will have to flush the LSN manually outside Debezium.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: LOW
	 - Required: false

==========================
Connector
==========================
ðŸ”˜ event.processing.failure.handling.mode

Specify how failures during processing of events (i.e. when encountering a corrupted event) should be handled, including: 'fail' (the default) an exception indicating the problematic event and its position is raised, causing the connector to be stopped; 'warn' the problematic event and its position will be logged and the event will be skipped; 'ignore' the problematic event will be skipped.

	 - Type: STRING
	 - Default: fail
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ max.batch.size

Maximum size of each batch of source records. Defaults to 2048.

	 - Type: INT
	 - Default: 2048
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ max.queue.size

Maximum size of the queue for change events read from the database log but not yet recorded or forwarded. Defaults to 8192, and should always be larger than the maximum batch size.

	 - Type: INT
	 - Default: 8192
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ poll.interval.ms

Time to wait for new change events to appear after receiving no events, given in milliseconds. Defaults to 500 ms.

	 - Type: LONG
	 - Default: 500
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ max.queue.size.in.bytes

Maximum size of the queue in bytes for change events read from the database log but not yet recorded or forwarded. Defaults to 0. Mean the feature is not enabled

	 - Type: LONG
	 - Default: 0
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ provide.transaction.metadata

Enables transaction metadata extraction together with event counting

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ snapshot.delay.ms

A delay period before a snapshot will begin, given in milliseconds. Defaults to 0 ms.

	 - Type: LONG
	 - Default: 0
	 - Importance: LOW
	 - Required: false

ðŸ”˜ streaming.delay.ms

A delay period after the snapshot is completed and the streaming begins, given in milliseconds. Defaults to 0 ms.

	 - Type: LONG
	 - Default: 0
	 - Importance: LOW
	 - Required: false

ðŸ”˜ snapshot.include.collection.list

This setting must be set to specify a list of tables/collections whose snapshot must be taken on creating or restarting the connector.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.fetch.size

The maximum number of records that should be loaded into memory while performing a snapshot.

	 - Type: INT
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.max.threads

The maximum number of threads used to perform the snapshot. Defaults to 1.

	 - Type: INT
	 - Default: 1
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.custom.name

When 'snapshot.mode' is set as custom, this setting must be set to specify a the name of the custom implementation provided in the 'name()' method. The implementations must implement the 'Snapshotter' interface and is called on each app boot to determine whether to do a snapshot.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.configuration.based.snapshot.data

When 'snapshot.mode' is set as configuration_based, this setting permits to specify whenever the data should be snapshotted or not.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.configuration.based.snapshot.schema

When 'snapshot.mode' is set as configuration_based, this setting permits to specify whenever the schema should be snapshotted or not.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.configuration.based.start.stream

When 'snapshot.mode' is set as configuration_based, this setting permits to specify whenever the stream should start or not after snapshot.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.configuration.based.snapshot.on.schema.error

When 'snapshot.mode' is set as configuration_based, this setting permits to specify whenever the schema should be snapshotted or not in case of error.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode.configuration.based.snapshot.on.data.error

When 'snapshot.mode' is set as configuration_based, this setting permits to specify whenever the data should be snapshotted or not in case of error.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ retriable.restart.connector.wait.ms

Time to wait before restarting connector after retriable exception occurs. Defaults to 10000ms.

	 - Type: LONG
	 - Default: 10000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ query.fetch.size

The maximum number of records that should be loaded into memory while streaming. A value of '0' uses the default JDBC fetch size.

	 - Type: INT
	 - Default: 0
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ errors.max.retries

The maximum number of retries on connection errors before failing (-1 = no limit, 0 = disabled, > 0 = num of retries).

	 - Type: INT
	 - Default: -1
	 - Importance: LOW
	 - Required: false

ðŸ”˜ incremental.snapshot.watermarking.strategy

Specify the strategy used for watermarking during an incremental snapshot: 'insert_insert' both open and close signal is written into signal data collection (default); 'insert_delete' only open signal is written on signal data collection, the close will delete the relative open signal;

	 - Type: STRING
	 - Default: INSERT_INSERT
	 - Importance: LOW
	 - Required: false

ðŸ”˜ internal.log.position.check.enable

When enabled the connector checks if the position stored in the offset is still available in the log

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ internal.advanced.metrics.enable

When enabled the connector will emit advanced streaming metrics

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ decimal.handling.mode

Specify how DECIMAL and NUMERIC columns should be represented in change events, including: 'precise' (the default) uses java.math.BigDecimal to represent values, which are encoded in the change events using a binary representation and Kafka Connect's 'org.apache.kafka.connect.data.Decimal' type; 'string' uses string to represent values; 'double' represents values using Java's 'double', which may not offer the precision but will be far easier to use in consumers.

	 - Type: STRING
	 - Default: precise
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ time.precision.mode

Time, date, and timestamps can be represented with different kinds of precisions, including: 'adaptive' (the default) bases the precision of time, date, and timestamp values on the database column's precision; 'adaptive_time_microseconds' like 'adaptive' mode, but TIME fields always use microseconds precision; 'connect' always represents time, date, and timestamp values using Kafka Connect's built-in representations for Time, Date, and Timestamp, which uses millisecond precision regardless of the database columns' precision.

	 - Type: STRING
	 - Default: adaptive
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.lock.timeout.ms

The maximum number of millis to wait for table locks at the beginning of a snapshot. If locks cannot be acquired in this time frame, the snapshot will be aborted. Defaults to 10 seconds

	 - Type: LONG
	 - Default: 10000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.mode

The criteria for running a snapshot upon startup of the connector. Select one of the following snapshot options: 'always': The connector runs a snapshot every time that it starts. After the snapshot completes, the connector begins to stream changes from the transaction log.; 'initial' (default): If the connector does not detect any offsets for the logical server name, it runs a snapshot that captures the current full state of the configured tables. After the snapshot completes, the connector begins to stream changes from the transaction log. 'initial_only': The connector performs a snapshot as it does for the 'initial' option, but after the connector completes the snapshot, it stops, and does not stream changes from the transaction log.; 'never': The connector does not run a snapshot. Upon first startup, the connector immediately begins reading from the beginning of the transaction log. 'exported': This option is deprecated; use 'initial' instead.; 'custom': The connector loads a custom class  to specify how the connector performs snapshots. For more information, see Custom snapshotter SPI in the PostgreSQL connector documentation.

	 - Type: STRING
	 - Default: initial
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.isolation.mode

Controls which transaction isolation level is used. The default is 'serializable', which means that serializable isolation level is used. When 'repeatable_read' is specified, connector runs the initial snapshot in REPEATABLE READ isolation level. When 'read_committed' is specified, connector runs the initial snapshot in READ COMMITTED isolation level. In 'read_uncommitted' is specified, connector runs the initial snapshot in READ UNCOMMITTED isolation level.

	 - Type: STRING
	 - Default: serializable
	 - Importance: LOW
	 - Required: false

ðŸ”˜ snapshot.query.mode

Controls query used during the snapshot

	 - Type: STRING
	 - Default: select_all
	 - Importance: LOW
	 - Required: false

ðŸ”˜ snapshot.query.mode.custom.name

When 'snapshot.query.mode' is set as custom, this setting must be set to specify a the name of the custom implementation provided in the 'name()' method. The implementations must implement the 'SnapshotterQuery' interface and is called to determine how to build queries during snapshot.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.locking.mode.custom.name

When 'snapshot.locking.mode' is set as custom, this setting must be set to specify a the name of the custom implementation provided in the 'name()' method. The implementations must implement the 'SnapshotterLocking' interface and is called to determine how to lock tables during schema snapshot.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.locking.mode

Controls how the connector holds locks on tables while performing the schema snapshot. The 'shared' which means the connector will hold a table lock that prevents exclusive table access for just the initial portion of the snapshot while the database schemas and other metadata are being read. The remaining work in a snapshot involves selecting all rows from each table, and this is done using a flashback query that requires no locks. However, in some cases it may be desirable to avoid locks entirely which can be done by specifying 'none'. This mode is only safe to use if no schema changes are happening while the snapshot is taken.

	 - Type: STRING
	 - Default: none
	 - Importance: LOW
	 - Required: false

ðŸ”˜ hstore.handling.mode

Specify how HSTORE columns should be represented in change events, including: 'json' represents values as string-ified JSON (default); 'map' represents values as a key/value map

	 - Type: STRING
	 - Default: json
	 - Importance: LOW
	 - Required: false

ðŸ”˜ binary.handling.mode

Specify how binary (blob, binary, etc.) columns should be represented in change events, including: 'bytes' represents binary data as byte array (default); 'base64' represents binary data as base64-encoded string; 'base64-url-safe' represents binary data as base64-url-safe-encoded string; 'hex' represents binary data as hex-encoded (base16) string

	 - Type: STRING
	 - Default: bytes
	 - Importance: LOW
	 - Required: false

ðŸ”˜ schema.name.adjustment.mode

Specify how schema names should be adjusted for compatibility with the message converter used by the connector, including: 'avro' replaces the characters that cannot be used in the Avro type name with underscore; 'avro_unicode' replaces the underscore or characters that cannot be used in the Avro type name with corresponding unicode like _uxxxx. Note: _ is an escape sequence like backslash in Java;'none' does not apply any adjustment (default)

	 - Type: STRING
	 - Default: none
	 - Importance: LOW
	 - Required: false

ðŸ”˜ interval.handling.mode

Specify how INTERVAL columns should be represented in change events, including: 'string' represents values as an exact ISO formatted string; 'numeric' (default) represents values using the inexact conversion into microseconds

	 - Type: STRING
	 - Default: numeric
	 - Importance: LOW
	 - Required: false

ðŸ”˜ schema.refresh.mode

Specify the conditions that trigger a refresh of the in-memory schema for a table. 'columns_diff' (the default) is the safest mode, ensuring the in-memory schema stays in-sync with the database table's schema at all times. 'columns_diff_exclude_unchanged_toast' instructs the connector to refresh the in-memory schema cache if there is a discrepancy between it and the schema derived from the incoming message, unless unchanged TOASTable data fully accounts for the discrepancy. This setting can improve connector performance significantly if there are frequently-updated tables that have TOASTed data that are rarely part of these updates. However, it is possible for the in-memory schema to become outdated if TOASTable columns are dropped from the table.

	 - Type: STRING
	 - Default: columns_diff
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ incremental.snapshot.chunk.size

The maximum size of chunk (number of documents/rows) for incremental snapshotting

	 - Type: INT
	 - Default: 1024
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ unavailable.value.placeholder

Specify the constant that will be provided by Debezium to indicate that the original value is a toasted value not provided by the database. If starts with 'hex:' prefix it is expected that the rest of the string represents hexadecimal encoded octets.

	 - Type: STRING
	 - Default: __debezium_unavailable_value
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ message.prefix.include.list

A comma-separated list of regular expressions that match the logical decoding message prefixes to be monitored. All prefixes are monitored by default.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ message.prefix.exclude.list

A comma-separated list of regular expressions that match the logical decoding message prefixes to be excluded from monitoring.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

==========================
Events
==========================
ðŸ”˜ converters

Optional list of custom converters that would be used instead of default ones. The converters are defined using '<converter.prefix>.type' config option and configured using options '<converter.prefix>.<option>'

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ post.processors

Optional list of post processors. The processors are defined using '<post.processor.prefix>.type' config option and configured using options '<post.processor.prefix.<option>'

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ tombstones.on.delete

Whether delete operations should be represented by a delete event and a subsequent tombstone event (true) or only by a delete event (false). Emitting the tombstone event (the default behavior) allows Kafka to completely delete all events pertaining to the given key once the source record got deleted.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ heartbeat.interval.ms

Length of an interval in milli-seconds in in which the connector periodically sends heartbeat messages to a heartbeat topic. Use 0 to disable heartbeat messages. Disabled by default.

	 - Type: INT
	 - Default: 0
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ heartbeat.topics.prefix

The prefix that is used to name heartbeat topics.Defaults to __debezium-heartbeat.

	 - Type: STRING
	 - Default: __debezium-heartbeat
	 - Importance: LOW
	 - Required: false

ðŸ”˜ signal.data.collection

The name of the data collection that is used to send signals/commands to Debezium. Signaling is disabled when not set.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ signal.poll.interval.ms

Interval for looking for new signals in registered channels, given in milliseconds. Defaults to 5 seconds.

	 - Type: LONG
	 - Default: 5000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ signal.enabled.channels

List of channels names that are enabled. Source channel is enabled by default

	 - Type: LIST
	 - Default: source
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ topic.naming.strategy

The name of the TopicNamingStrategy class that should be used to determine the topic name for data change, schema change, transaction, heartbeat event etc.

	 - Type: CLASS
	 - Default: io.debezium.schema.SchemaTopicNamingStrategy
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ notification.enabled.channels

List of notification channels names that are enabled.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ notification.sink.topic.name

The name of the topic for the notifications. This is required in case 'sink' is in the list of enabled channels

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ transaction.metadata.factory

Class to make transaction context & transaction struct/schemas

	 - Type: CLASS
	 - Default: io.debezium.pipeline.txmetadata.DefaultTransactionMetadataFactory
	 - Importance: LOW
	 - Required: false

ðŸ”˜ custom.metric.tags

The custom metric tags will accept key-value pairs to customize the MBean object name which should be appended the end of regular name, each key would represent a tag for the MBean object name, and the corresponding value would be the value of that tag the key is. For example: k1=v1,k2=v2

	 - Type: LIST
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ column.include.list

Regular expressions matching columns to include in change events

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ column.exclude.list

Regular expressions matching columns to exclude from change events

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ table.include.list

The tables for which changes are to be captured

	 - Type: LIST
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ table.exclude.list

A comma-separated list of regular expressions that match the fully-qualified names of tables to be excluded from monitoring

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ table.ignore.builtin

Flag specifying whether built-in tables should be ignored.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: LOW
	 - Required: false

ðŸ”˜ schema.include.list

The schemas for which events should be captured

	 - Type: LIST
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ schema.exclude.list

The schemas for which events must not be captured

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ message.key.columns

A semicolon-separated list of expressions that match fully-qualified tables and column(s) to be used as message key. Each expression must match the pattern '<fully-qualified table name>:<key columns>', where the table names could be defined as (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connector, and the key columns are a comma-separated list of columns representing the custom key. For any table without an explicit key configuration the table's primary key column(s) will be used as message key. Example: dbserver1.inventory.orderlines:orderId,orderLineId;dbserver1.inventory.orders:id

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ snapshot.select.statement.overrides

 This property contains a comma-separated list of fully-qualified tables (DB_NAME.TABLE_NAME) or (SCHEMA_NAME.TABLE_NAME), depending on the specific connectors. Select statements for the individual tables are specified in further configuration properties, one for each table, identified by the id 'snapshot.select.statement.overrides.[DB_NAME].[TABLE_NAME]' or 'snapshot.select.statement.overrides.[SCHEMA_NAME].[TABLE_NAME]', respectively. The value of those properties is the select statement to use when retrieving data from the specific table during snapshotting. A possible use case for large append-only tables is setting a specific point where to start (resume) snapshotting, in case a previous snapshotting was interrupted.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ column.mask.hash.([^.]+).with.salt.(.+)

A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked by hashing the input. Using the specified hash algorithms and salt.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ column.mask.with.(d+).chars

A comma-separated list of regular expressions matching fully-qualified names of columns that should be masked with configured amount of asterisk ('*') characters.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ column.truncate.to.(d+).chars

A comma-separated list of regular expressions matching fully-qualified names of columns that should be truncated to the configured amount of characters.

	 - Type: INT
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ include.schema.comments

Whether the connector parse table and column's comment to metadata object. Note: Enable this option will bring the implications on memory usage. The number and size of ColumnImpl objects is what largely impacts how much memory is consumed by the Debezium connectors, and adding a String to each of them can potentially be quite heavy. The default is 'false'.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ column.propagate.source.type

A comma-separated list of regular expressions matching fully-qualified names of columns that adds the columnâ€™s original type and original length as parameters to the corresponding field schemas in the emitted change records.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ datatype.propagate.source.type

A comma-separated list of regular expressions matching the database-specific data type names that adds the data type's original type and original length as parameters to the corresponding field schemas in the emitted change records.

	 - Type: LIST
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ internal.snapshot.scan.all.columns.force

Restore pre 1.5 behaviour and scan all tables to discover columns. If you are excluding one table then turning this on may improve performance. If you are excluding a lot of tables the default behavior should work well.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ snapshot.tables.order.by.row.count

Controls the order in which tables are processed in the initial snapshot. A `descending` value will order the tables by row count descending. A `ascending` value will order the tables by row count ascending. A value of `disabled` (the default) will disable ordering by row count.

	 - Type: STRING
	 - Default: disabled
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ heartbeat.action.query

The query executed with every heartbeat.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ include.unknown.datatypes

Specify whether the fields of data type not supported by Debezium should be processed: 'false' (the default) omits the fields; 'true' converts the field into an implementation dependent binary representation.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ sourceinfo.struct.maker

The name of the SourceInfoStructMaker class that returns SourceInfo schema and struct.

	 - Type: CLASS
	 - Default: io.debezium.connector.postgresql.PostgresSourceInfoStructMaker
	 - Importance: LOW
	 - Required: false

