==========================
Database
==========================
ðŸ”˜ connection.url

For example: ``jdbc:oracle:thin:@localhost:1521:orclpdb1``, ``jdbc:mysql://localhost/db_name``, ``jdbc:sqlserver://localhost;instance=SQLEXPRESS;databaseName=db_name``

	 - Type: false
	 - Default: STRING
	 - Importance: JDBC connection URL.
	 - Required: HIGH

ðŸ”˜ connection.user

JDBC connection user.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ connection.password

JDBC connection password.

	 - Type: PASSWORD
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ jdbc.credentials.provider.class

Credentials provider or provider chain to use for authentication to database. By default the connector uses ``io.confluent.connect.jdbc.util.DefaultJdbcCredentialsProvider``.

	 - Type: CLASS
	 - Default: io.confluent.connect.jdbc.util.DefaultJdbcCredentialsProvider
	 - Importance: LOW
	 - Required: false

ðŸ”˜ connection.attempts

Maximum number of attempts to retrieve a valid JDBC connection. Must be a positive integer.

	 - Type: INT
	 - Default: 3
	 - Importance: LOW
	 - Required: false

ðŸ”˜ connection.backoff.ms

Backoff time in milliseconds between connection attempts.

	 - Type: LONG
	 - Default: 10000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ table.whitelist



	 - Type: false
	 - Default: LIST
	 - Importance: List of tables to include in copying. If specified, ``table.blacklist`` may not be set. Use a comma-separated list to specify multiple tables (for example, ``table.whitelist: "User, Address, Email"``).
	 - Required: MEDIUM

ðŸ”˜ table.blacklist



	 - Type: false
	 - Default: LIST
	 - Importance: List of tables to exclude from copying. If specified, ``table.whitelist`` may not be set. Use a comma-separated list to specify multiple tables (for example, ``table.blacklist: "User, Address, Email"``).
	 - Required: MEDIUM

ðŸ”˜ table.include.list



	 - Type: false
	 - Default: LIST
	 - Importance: A comma-separated list of regular expressions that match the fully-qualified names of tables to be copied. Use a comma-separated list to specify multiple regular expressions. Table names are case-sensitive. For example, ``table.include.list: "schema1.customer.*,schema2.order.*"``. If specified, the legacy configs of ``table.whitelist``, and ``table.blacklist`` cannot be set.
	 - Required: MEDIUM

ðŸ”˜ table.exclude.list



	 - Type: false
	 - Default: LIST
	 - Importance: A comma-separated list of regular expressions that match the fully-qualified names of tables not to be copied. This only applies to tables that match the include list. REQUIRES ``table.include.list`` to be specified. Use a comma-separated list to specify multiple regular expressions. Table names are case-sensitive. For example, ``table.exclude.list: ".*.temp.*,.*.staging.*"``. If specified, ``table.whitelist`` and ``table.blacklist`` cannot not be set.
	 - Required: MEDIUM

ðŸ”˜ catalog.pattern

Catalog pattern to fetch table metadata from the database.

	 - Type: STRING
	 - Default: null
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ schema.pattern

Schema pattern to fetch table metadata from the database.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ numeric.precision.mapping

Whether or not to attempt mapping NUMERIC values by precision to integral types. This option is now deprecated. A future version may remove it completely. Please use ``numeric.mapping`` instead.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ numeric.mapping

Map NUMERIC values by precision and optionally scale to integral or decimal types.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ dialect.name



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the database dialect that should be used for this connector. By default this is empty, and the connector automatically determines the dialect based upon the JDBC connection URL. Use this if you want to override that behavior and use a specific dialect. All properly-packaged dialects in the JDBC connector plugin can be used.
	 - Required: LOW

ðŸ”˜ date.calendar.system

The time elapsed from epoch populated in the end table topic for DATE or TIMESTAMP type columns can have two different values based upon the Calendar used to interpret it. If LEGACY is used, it will use the hybrid Gregorian/Julian calendar which was the default in the older java date time APIs. However, if 'PROLEPTIC_GREGORIAN' is used, then it will use the proleptic gregorian calendar which extends the Gregorian rules backward indefinitely and does not apply the 1582 cutover. This matches the behavior of modern Java date/time APIs (java.time). This is defaulted to LEGACY for backward compatibility. Changing this configuration on an existing connector might lead to a drift in the kafka topic record values.

	 - Type: STRING
	 - Default: LEGACY
	 - Importance: LOW
	 - Required: false

==========================
Mode
==========================
ðŸ”˜ mode

  * bulk: perform a bulk load of the entire table each time it is polled

	 - Type: false
	 - Default: STRING
	 - Importance: The mode for updating a table each time it is polled. Options include:
	 - Required: HIGH

ðŸ”˜ incrementing.column.name



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the strictly incrementing column to use to detect new rows. Any empty value indicates the column should be autodetected by looking for an auto-incrementing column. This column may not be nullable.
	 - Required: MEDIUM

ðŸ”˜ timestamp.column.name



	 - Type: false
	 - Default: LIST
	 - Importance: Comma separated list of one or more timestamp columns to detect new or modified rows using the COALESCE SQL function. Rows whose first non-null timestamp value is greater than the largest previous timestamp value seen will be discovered with each poll. At least one column should not be nullable.
	 - Required: MEDIUM

ðŸ”˜ timestamp.columns.mapping



	 - Type: false
	 - Default: LIST
	 - Importance: A comma separated list of table regex to timestamp columns mappings. On specifying multiple timestamp columns, COALESCE SQL function would be used to find out the effective timestamp for a row. Expected format is ``regex1:[col1|col2],regex2:[col3]``. Regexes would be matched against the fully-qualified table names of tables. Every table included for capture should match exactly one of the provided mappings. An example for a valid input would be ``SCHEMA1.EMPLOYEES.SALARY.*:[UPDATED_AT|MODIFIED_AT],ACCOUNTS.*:[CHANGED_AT]``
	 - Required: MEDIUM

ðŸ”˜ incrementing.column.mapping



	 - Type: false
	 - Default: LIST
	 - Importance: A comma separated list of table regex to incrementing column mappings. Expected format is ``regex1:col2,regex2:col1``. Regexes would be matched against the fully-qualified table names of tables. Every table included for capture should match exactly one of the provided mappings. An example for a valid input would be ``SCHEMA1.EMPLOYEES.SALARY*:EMP_ID,ACCOUNTS.*:ID``
	 - Required: MEDIUM

ðŸ”˜ timestamp.initial

The epoch timestamp used for initial queries that use timestamp criteria. Use -1 to use the current time. If not specified, all data will be retrieved.

	 - Type: LONG
	 - Default: null
	 - Importance: LOW
	 - Required: false

ðŸ”˜ validate.non.null

By default, the JDBC connector will validate that all incrementing and timestamp tables have NOT NULL set for the columns being used as their ID/timestamp. If the tables don't, JDBC connector will fail to start. Setting this to false will disable these checks.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: LOW
	 - Required: false

ðŸ”˜ query



	 - Type: false
	 - Default: STRING
	 - Importance: If specified, the query to perform to select new or updated rows. Use this setting if you want to join tables, select subsets of columns in a table, or filter data. If used, this connector will only copy data using this query -- whole-table copying will be disabled. Different query modes may still be used for incremental updates, but in order to properly construct the incremental query, it must be possible to append a WHERE clause to this query (i.e. no WHERE clauses may be used). If you use a WHERE clause, it must handle incremental queries itself.
	 - Required: MEDIUM

ðŸ”˜ quote.sql.identifiers

When to quote table names, column names, and other identifiers in SQL statements. For backward compatibility, the default is ``always``.

	 - Type: STRING
	 - Default: ALWAYS
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ query.suffix



	 - Type: false
	 - Default: STRING
	 - Importance: Suffix to append at the end of the generated query.
	 - Required: LOW

ðŸ”˜ transaction.isolation.mode

Mode to control which transaction isolation level is used when running queries against the database. By default no explicit transaction isolationmode is set. SQL_SERVER_SNAPSHOT will only workagainst a connector configured to write to Sql Server.  Options include:

	 - Type: STRING
	 - Default: DEFAULT
	 - Importance: LOW
	 - Required: false

ðŸ”˜ query.retry.attempts

Number of times to retry SQL exceptions encountered when executing queries.

	 - Type: INT
	 - Default: -1
	 - Importance: LOW
	 - Required: false

==========================
Connector
==========================
ðŸ”˜ table.types

By default, the JDBC connector will only detect tables with type TABLE from the source Database. This config allows a command separated list of table types to extract. Options include:

	 - Type: LIST
	 - Default: TABLE
	 - Importance: LOW
	 - Required: false

ðŸ”˜ poll.interval.ms

Frequency in ms to poll for new data in each table.

	 - Type: INT
	 - Default: 5000
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ batch.max.rows

Maximum number of rows to include in a single batch when polling for new data. This setting can be used to limit the amount of data buffered internally in the connector.

	 - Type: INT
	 - Default: 1000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ max.buffer.size

The maximum number of records from the source database that can be buffered into memory. The default of 0 means a buffer size will be based on the maximum batch size.

	 - Type: INT
	 - Default: 0
	 - Importance: LOW
	 - Required: false

ðŸ”˜ poll.linger.ms

The maximum time to wait for a record before returning an empty batch. The default is 5 seconds.

	 - Type: LONG
	 - Default: 5000
	 - Importance: LOW
	 - Required: false

==========================
null
==========================
ðŸ”˜ table.monitoring.startup.polling.limit.ms



	 - Type: LONG
	 - Default: 10000
	 - Importance: LOW
	 - Required: false

==========================
Connector
==========================
ðŸ”˜ table.poll.interval.ms

Frequency in ms to poll for new or removed tables, which may result in updated task configurations to start polling for data in added tables or stop polling for data in removed tables.

	 - Type: LONG
	 - Default: 60000
	 - Importance: LOW
	 - Required: false

ðŸ”˜ topic.prefix



	 - Type: false
	 - Default: STRING
	 - Importance: Prefix to prepend to table names to generate the name of the Kafka topic to publish data to, or in the case of a custom query, the full name of the topic to publish to.
	 - Required: HIGH

ðŸ”˜ timestamp.delay.interval.ms

How long to wait after a row with certain timestamp appears before we include it in the result. You may choose to add some delay to allow transactions with earlier timestamp to complete. The first execution will fetch all available records (i.e. starting at timestamp 0) until current time minus the delay. Every following execution will get data from the last time we fetched until current time minus the delay.

	 - Type: LONG
	 - Default: 0
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ db.timezone

Name of the JDBC timezone used in the connector when querying with time-based criteria. Defaults to UTC.

	 - Type: STRING
	 - Default: UTC
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ timestamp.granularity

Define the granularity of the Timestamp column. Options include: 

	 - Type: STRING
	 - Default: connect_logical
	 - Importance: LOW
	 - Required: false

