==========================
Connection
==========================
ðŸ”˜ connection.url

JDBC connection URL.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: true

ðŸ”˜ connection.user

JDBC connection user.

	 - Type: STRING
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ connection.password

JDBC connection password.

	 - Type: PASSWORD
	 - Default: null
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ jdbc.credentials.provider.class

Credentials provider or provider chain to use for authentication to database. By default the connector uses ``io.confluent.connect.jdbc.util.DefaultJdbcCredentialsProvider``.

	 - Type: CLASS
	 - Default: io.confluent.connect.jdbc.util.DefaultJdbcCredentialsProvider
	 - Importance: LOW
	 - Required: false

ðŸ”˜ dialect.name



	 - Type: false
	 - Default: STRING
	 - Importance: The name of the database dialect that should be used for this connector. By default this is empty, and the connector automatically determines the dialect based upon the JDBC connection URL. Use this if you want to override that behavior and use a specific dialect. All properly-packaged dialects in the JDBC connector plugin can be used.
	 - Required: LOW

ðŸ”˜ connection.attempts

Maximum number of attempts to retrieve a valid JDBC connection. Must be a positive integer.

	 - Type: INT
	 - Default: 3
	 - Importance: LOW
	 - Required: false

ðŸ”˜ connection.backoff.ms

Backoff time in milliseconds between connection attempts.

	 - Type: LONG
	 - Default: 10000
	 - Importance: LOW
	 - Required: false

==========================
Writes
==========================
ðŸ”˜ insert.mode

The insertion mode to use. Supported modes are:

	 - Type: STRING
	 - Default: insert
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ batch.size

Specifies how many records to attempt to batch together for insertion into the destination table, when possible.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ delete.enabled

Whether to treat ``null`` record values as deletes. Requires ``pk.mode`` to be ``record_key``.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ table.types

The comma-separated types of database tables to which the sink connector can write. By default this is ``TABLE``, but any combination of ``TABLE``, ``PARTITIONED TABLE`` and ``VIEW`` is allowed. Not all databases support writing to views, and when they do the sink connector will fail if the view definition does not match the records' schemas (regardless of ``auto.evolve``).

	 - Type: LIST
	 - Default: TABLE
	 - Importance: LOW
	 - Required: false

ðŸ”˜ replace.null.with.default

Whether to replace ``null`` value with default value

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: LOW
	 - Required: false

==========================
Data Mapping
==========================
ðŸ”˜ table.name.format

A format string for the destination table name, which may contain '${topic}' as a placeholder for the originating topic name.

	 - Type: STRING
	 - Default: ${topic}
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ pk.mode

The primary key mode, also refer to ``pk.fields`` documentation for interplay. Supported modes are:

	 - Type: STRING
	 - Default: none
	 - Importance: HIGH
	 - Required: false

ðŸ”˜ pk.fields

``none``

	 - Type: false
	 - Default: LIST
	 - Importance: List of comma-separated primary key field names. The runtime interpretation of this config depends on the ``pk.mode``:
	 - Required: MEDIUM

ðŸ”˜ fields.whitelist

Note that ``pk.fields`` is applied independently in the context of which field(s) form the primary key columns in the destination database, while this configuration is applicable for the other columns.

	 - Type: false
	 - Default: LIST
	 - Importance: List of comma-separated record value field names. If empty, all fields from the record value are utilized, otherwise used to filter to the desired fields.
	 - Required: MEDIUM

ðŸ”˜ db.timezone

Name of the JDBC timezone that should be used in the connector when inserting time-based values. Defaults to UTC.

	 - Type: STRING
	 - Default: UTC
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ date.timezone

Name of the JDBC timezone that should be used in the connector when inserting DATE type values. Defaults to DB_TIMEZONE that uses the timezone set for db.timzeone configuration (to maintain backward compatibility). It is recommended to set this to UTC to avoid conversion for DATE type values.

	 - Type: STRING
	 - Default: DB_TIMEZONE
	 - Importance: LOW
	 - Required: false

ðŸ”˜ timestamp.fields.list



	 - Type: false
	 - Default: LIST
	 - Importance: List of comma-separated record value timestamp field names that should be converted to timestamps. These fields will be converted based on precision mode specified in timestamp.precision.mode(microseconds or nanoseconds). The timestamp fields included here should be Long or String type and nested fields are not supported.
	 - Required: MEDIUM

ðŸ”˜ timestamp.precision.mode

Convert the Timestamp with precision. If set to microseconds, the timestamp will be converted to microsecond precision. If set to nanoseconds the timestamp will be converted to nanoseconds precision.

	 - Type: STRING
	 - Default: MICROSECONDS
	 - Importance: LOW
	 - Required: false

ðŸ”˜ date.calendar.system

Conversion of time since epoch value in kafka topic record to DATE or TIMESTAMP depends on the calendar used to interpret it. If LEGACY is used, it will use the hybrid Gregorian/Julian calendar which was the default in the older java date time APIs. However, if 'PROLEPTIC_GREGORIAN' is used, then it will use the proleptic gregorian calendar which extends the Gregorian rules backward indefinitely and does not apply the 1582 cutover. This matches the behavior of modern Java date/time APIs (java.time). This is defaulted to LEGACY for backward compatibility. The ideal setting for this depends on whether the values in source topic were populated using old or new java date time APIs. Changing this configuration on an existing connector might lead to a drift in the DATE/TIMESTAMP column's values populated in the sink database.

	 - Type: STRING
	 - Default: LEGACY
	 - Importance: LOW
	 - Required: false

==========================
DDL Support
==========================
ðŸ”˜ auto.create

Whether to automatically create the destination table based on record schema if it is found to be missing by issuing ``CREATE``.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ auto.evolve

Whether to automatically add columns in the table schema when found to be missing relative to the record schema by issuing ``ALTER``.

	 - Type: BOOLEAN
	 - Default: false
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ quote.sql.identifiers

When to quote table names, column names, and other identifiers in SQL statements. For backward compatibility, the default is ``always``.

	 - Type: STRING
	 - Default: ALWAYS
	 - Importance: MEDIUM
	 - Required: false

==========================
DML Support
==========================
ðŸ”˜ mssql.use.merge.holdlock

Whether to use HOLDLOCK when performing a MERGE INTO upsert statement. Note that it is only applicable to SQL Server.

	 - Type: BOOLEAN
	 - Default: true
	 - Importance: LOW
	 - Required: false

==========================
Retries
==========================
ðŸ”˜ max.retries

The maximum number of times to retry on errors before failing the task.

	 - Type: INT
	 - Default: 10
	 - Importance: MEDIUM
	 - Required: false

ðŸ”˜ retry.backoff.ms

The time in milliseconds to wait following an error before a retry attempt is made.

	 - Type: INT
	 - Default: 3000
	 - Importance: MEDIUM
	 - Required: false

==========================
null
==========================
ðŸ”˜ trim.sensitive.log



	 - Type: BOOLEAN
	 - Default: false
	 - Importance: LOW
	 - Required: false

ðŸ”˜ key.converter.converter.type

How this converter will be used.

	 - Type: STRING
	 - Default: null
	 - Importance: LOW
	 - Required: true

ðŸ”˜ key.converter.converter.encoding

The name of the Java character set to use for encoding strings as byte arrays.

	 - Type: STRING
	 - Default: UTF-8
	 - Importance: HIGH
	 - Required: false

