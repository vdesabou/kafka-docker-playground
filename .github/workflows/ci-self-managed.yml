name: CI Self-Managed

on:
  # push:
  #    branches:
  #      - master

  # schedule:
  #     - cron: '0 0 * * 0' # every week on sunday at 0 am

  workflow_dispatch:
    inputs:

jobs:
  start-runner:
    name: Start Github self-hosted runner
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: vdesabou/kafka-docker-playground
        fetch-depth: 0

    - name: Decrypt secrets.tar
      run: |
        ./.github/scripts/decrypt_secret.sh
        tar xvf secrets.tar
        rm secrets.tar
        mkdir -p $HOME/.aws
        mv aws_credentials $HOME/.aws/credentials
        chmod -R a+rw $HOME/.aws
        mkdir -p $HOME/.confluent
        echo "$DOCKER_PASSWORD" | docker login -u vdesabou --password-stdin
      env:
        SECRETS_ENCRYPTION_PASSWORD: ${{ secrets.SECRETS_ENCRYPTION_PASSWORD }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}

    - name: Start EC2 instance github-actions-runner-vsaboulin
      run: |
        aws ec2 start-instances --instance-ids i-089ef31a75cb3f0e6

  build:
    runs-on: self-hosted
    needs: start-runner # required to start the main job when the runner is read
    name: ${{ matrix.tag }} ${{ matrix.test_list }}
    strategy:
      fail-fast: false
      matrix:
        tag: ["5.4.9","5.5.11","6.0.9","6.1.7","6.2.6","7.0.5","7.1.3","7.2.1"]
        test_list : [
                      "ðŸš€ connect/connect-mapr-sink",
                    ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: vdesabou/kafka-docker-playground
          fetch-depth: 0

      - name: Decrypt secrets.tar
        run: |
          ./.github/scripts/decrypt_secret.sh
          tar xvf secrets.tar
          rm secrets.tar
          mkdir -p $HOME/.aws
          mv aws_credentials_with_assuming_iam_role $HOME/.aws/credentials-with-assuming-iam-role
          chmod -R a+rw $HOME/.aws
          mkdir -p $HOME/.confluent
          echo "$DOCKER_PASSWORD" | docker login -u vdesabou --password-stdin
        env:
          SECRETS_ENCRYPTION_PASSWORD: ${{ secrets.SECRETS_ENCRYPTION_PASSWORD }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}

      - name: Build and Test
        run: bash scripts/run-tests.sh "${{ matrix.test_list }}" "${{ matrix.tag }}"
        env:
          DISABLE_KSQLDB: "yes"
          DISABLE_CONTROL_CENTER: "yes"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_ACCESS_KEY_ID}}
          AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_SECRET_ACCESS_KEY}}
          AWS_STS_ROLE_ARN: ${{ secrets.AWS_STS_ROLE_ARN}}
          AZ_USER: ${{ secrets.AZ_USER}}
          AZ_PASS: ${{ secrets.AZ_PASS}}
          AZURE_TENANT_NAME: ${{ secrets.AZURE_TENANT_NAME}}
          CONFLUENT_CLOUD_EMAIL: ${{ secrets.CONFLUENT_CLOUD_EMAIL}}
          CONFLUENT_CLOUD_PASSWORD: ${{ secrets.CONFLUENT_CLOUD_PASSWORD}}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT}}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME}}
          CLUSTER_REGION: ${{ secrets.CLUSTER_REGION}}
          CLUSTER_CLOUD: ${{ secrets.CLUSTER_CLOUD}}
          CLUSTER_CREDS: ${{ secrets.CLUSTER_CREDS}}
          SCHEMA_REGISTRY_CREDS: ${{ secrets.SCHEMA_REGISTRY_CREDS}}
          CONFLUENT_LICENSE: ${{ secrets.CONFLUENT_LICENSE}}
          SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME}}
          SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD}}
          SALESFORCE_CONSUMER_KEY: ${{ secrets.SALESFORCE_CONSUMER_KEY}}
          SALESFORCE_CONSUMER_PASSWORD: ${{ secrets.SALESFORCE_CONSUMER_PASSWORD}}
          SALESFORCE_SECURITY_TOKEN: ${{ secrets.SALESFORCE_SECURITY_TOKEN}}
          SALESFORCE_INSTANCE: ${{ secrets.SALESFORCE_INSTANCE}}
          SALESFORCE_USERNAME_ACCOUNT2: ${{ secrets.SALESFORCE_USERNAME_ACCOUNT2}}
          SALESFORCE_PASSWORD_ACCOUNT2: ${{ secrets.SALESFORCE_PASSWORD_ACCOUNT2}}
          SALESFORCE_SECURITY_TOKEN_ACCOUNT2: ${{ secrets.SALESFORCE_SECURITY_TOKEN_ACCOUNT2}}
          SALESFORCE_CONSUMER_KEY_ACCOUNT2: ${{ secrets.SALESFORCE_CONSUMER_KEY_ACCOUNT2}}
          SALESFORCE_CONSUMER_PASSWORD_ACCOUNT2: ${{ secrets.SALESFORCE_CONSUMER_PASSWORD_ACCOUNT2}}
          DD_API_KEY: ${{ secrets.DD_API_KEY}}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY}}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN}}
          JIRA_URL: ${{ secrets.JIRA_URL}}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME}}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN}}
          MARKETO_ENDPOINT_URL: ${{ secrets.MARKETO_ENDPOINT_URL}}
          MARKETO_CLIENT_ID: ${{ secrets.MARKETO_CLIENT_ID}}
          MARKETO_CLIENT_SECRET: ${{ secrets.MARKETO_CLIENT_SECRET}}
          PAGERDUTY_USER_EMAIL: ${{ secrets.PAGERDUTY_USER_EMAIL}}
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY}}
          PAGERDUTY_SERVICE_ID: ${{ secrets.PAGERDUTY_SERVICE_ID}}
          CCLOUD_REST_PROXY_SECURITY_PLUGIN_API_KEY: ${{ secrets.CCLOUD_REST_PROXY_SECURITY_PLUGIN_API_KEY}}
          CCLOUD_REST_PROXY_SECURITY_PLUGIN_API_SECRET: ${{ secrets.CCLOUD_REST_PROXY_SECURITY_PLUGIN_API_SECRET}}
          SERVICENOW_URL: ${{ secrets.SERVICENOW_URL}}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD}}
          SERVICENOW_DEVELOPER_USERNAME: ${{ secrets.SERVICENOW_DEVELOPER_USERNAME}}
          SERVICENOW_DEVELOPER_PASSWORD: ${{ secrets.SERVICENOW_DEVELOPER_PASSWORD}}
          SNOWFLAKE_ACCOUNT_NAME: ${{ secrets.SNOWFLAKE_ACCOUNT_NAME}}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME}}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD}}
          ZENDESK_URL: ${{ secrets.ZENDESK_URL}}
          ZENDESK_USERNAME: ${{ secrets.ZENDESK_USERNAME}}
          ZENDESK_PASSWORD: ${{ secrets.ZENDESK_PASSWORD}}
          CONNECTOR_GITHUB_ACCESS_TOKEN: ${{ secrets.CONNECTOR_GITHUB_ACCESS_TOKEN}}
          CI_GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN}}
          AUDIT_LOG_CLUSTER_BOOTSTRAP_SERVERS: ${{ secrets.AUDIT_LOG_CLUSTER_BOOTSTRAP_SERVERS}}
          AUDIT_LOG_CLUSTER_API_KEY: ${{ secrets.AUDIT_LOG_CLUSTER_API_KEY}}
          AUDIT_LOG_CLUSTER_API_SECRET: ${{ secrets.AUDIT_LOG_CLUSTER_API_SECRET}}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN}}
          DATABRICKS_AWS_BUCKET_NAME: ${{ secrets.DATABRICKS_AWS_BUCKET_NAME}}
          DATABRICKS_AWS_BUCKET_REGION: ${{ secrets.DATABRICKS_AWS_BUCKET_REGION}}
          DATABRICKS_AWS_STAGING_S3_ACCESS_KEY_ID: ${{ secrets.DATABRICKS_AWS_STAGING_S3_ACCESS_KEY_ID}}
          DATABRICKS_AWS_STAGING_S3_SECRET_ACCESS_KEY: ${{ secrets.DATABRICKS_AWS_STAGING_S3_SECRET_ACCESS_KEY}}
          DATABRICKS_SERVER_HOSTNAME: ${{ secrets.DATABRICKS_SERVER_HOSTNAME}}
          DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH}}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN}}
          ORACLE_CONTAINER_REGISTRY_USERNAME: ${{ secrets.ORACLE_CONTAINER_REGISTRY_USERNAME}}
          ORACLE_CONTAINER_REGISTRY_PASSWORD: ${{ secrets.ORACLE_CONTAINER_REGISTRY_PASSWORD}}
          KEYFILE_CONTENT: ${{ secrets.KEYFILE_CONTENT}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}

  stop-runner:
    name: Stop Github self-hosted runner
    needs:
      - start-runner # required to get output from the start-runner job
      - build # required to wait when the main job is done
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: vdesabou/kafka-docker-playground
        fetch-depth: 0

    - name: Decrypt secrets.tar
      run: |
        ./.github/scripts/decrypt_secret.sh
        tar xvf secrets.tar
        rm secrets.tar
        mkdir -p $HOME/.aws
        mv aws_credentials_with_assuming_iam_role $HOME/.aws/credentials-with-assuming-iam-role
        chmod -R a+rw $HOME/.aws
        mkdir -p $HOME/.confluent
        echo "$DOCKER_PASSWORD" | docker login -u vdesabou --password-stdin
      env:
        SECRETS_ENCRYPTION_PASSWORD: ${{ secrets.SECRETS_ENCRYPTION_PASSWORD }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}

    - name: Stop EC2 instance github-actions-runner-vsaboulin
      run: |
        aws ec2 stop-instances --instance-ids i-089ef31a75cb3f0e6
